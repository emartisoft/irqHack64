; Menu program for IrqHack64
; 25/09/2015 - Istanbul

COLLOW	  	= $FB
COLHIGH	  	= $FC
NAMELOW	  	= $FD
NAMEHIGH  	= $FE
BITTARGET	= $64
COMMANDNEXTPAGE = $43
COMMANDPREVPAGE = $41
COMMANDENTERMASK = $01

DATA_LOW	= $03
DATA_HIGH 	= $04
DATA_LENGTH	= $05
RESERVED	= $06
ACTUAL_LOW	= $07
ACTUAL_HIGH	= $08

CHROUT    	= $FFD2
GETIN 	  	= $FFE4
SCNKEY 		=  $FF9F 
CARTRIDGENMIHANDLER = $80BB ;$809a
SOFTNMIVECTOR	= $0318
IRQVECTOR	= $0314
ROMNMIHANDLER	= $FE47
ROMIRQHANDLER	= $FF48
BORDER		= $D020


	*=$080E						  	  	  	  	

	JSR INIT	
	JSR PRINTTITLE				
	JSR PRINTPAGE
	LDX #$00
	JSR SETCURRENTROWHEAD
	JSR SETARROW	
		
	
INPUT_GET
	JSR SCNKEY
 	JSR GETIN
  	BEQ INPUT_GET	
  	CMP #$2E
  	BEQ NEXTPAGE
  	CMP #$2C
  	BEQ PREVPAGE 
  	CMP #$2B
  	BEQ UP
  	CMP #$2D
  	BEQ DOWN 	
  	CMP #$0D
  	BEQ ENTER
	JMP INPUT_GET	
		  	
UP	
	INC $D020
	LDX #COMMANDENTERMASK
	STX COMMANDBYTE
	JSR GETCURRENTROW
	JSR CLEARARROW
	TXA
	BNE NORMALUP
	LDX CURPAGEITEMS
NORMALUP	
	DEX
	JSR SETCURRENTROWHEAD 	
	JSR SETARROW
	JMP INPUT_GET

DOWN
	INC $D020
	LDX #COMMANDENTERMASK
	STX COMMANDBYTE	
	JSR GETCURRENTROW	
	JSR CLEARARROW
	INX
	CPX CURPAGEITEMS
	BNE ROLLINGDOWN
	LDX #$00
ROLLINGDOWN	
	JSR SETCURRENTROWHEAD 
	JSR SETARROW
	JMP INPUT_GET	

NEXTPAGE  	
	LDX CURPAGEINDEX
	CPX PAGECOUNT	  	
	BLT EXECNEXT
	JMP INPUT_GET
EXECNEXT
	INC CURPAGEINDEX	
	LDX #COMMANDNEXTPAGE
	STX COMMANDBYTE
	CLV
	BVC ENTER
PREVPAGE  	  	  	
  	LDX CURPAGEINDEX
  	BNE EXECPREV
  	JMP INPUT_GET 
EXECPREV
	DEC CURPAGEINDEX
	LDX #COMMANDPREVPAGE
	STX COMMANDBYTE	
ENTER  	  
	LDA #$00
	STA BITPOS
	LDA #$7F
	AND $D011
	STA $D011

	JSR KILLCIA
	
	LDA COMMANDBYTE
	AND #$40
	BNE SPECIALCMD
	JSR GETCURRENTROW
	INX
	TXA
	SEC
	ROL
	TAX
	STX COMMANDBYTE	
	
SPECIALCMD		

	SEC
	BCC S0INIT	; IF LAST BIT IS ZERO THEN START WITH S0 OTHERWISE WITH S160
	
S160INIT
	LDA #$7F
	AND $D011
	STA $D011 
	LDA #$A0
	STA $D012
	LDA #<IRQHANDLER2
	STA IRQVECTOR
	LDA #>IRQHANDLER2
	STA IRQVECTOR+1
	
WAITRASTER1
	LDA $D012
	CMP #$A1
	BNE WAITRASTER1
		
	JMP ENABLERASTER	
	
S0INIT	
	;-- S0 ---
	LDA #$7F
	AND $D011
	STA $D011 		
	LDA #$00
	STA $D012
	LDA #<IRQHANDLER1
	STA IRQVECTOR
	LDA #>IRQHANDLER1
	STA IRQVECTOR+1
	
WAITRASTER2
	LDA $D012
	CMP #$01
	BNE WAITRASTER2
	
	
ENABLERASTER	
	LDA #$01
	STA $D01A	;Enable raster interrupts

	
	LDY #$00	
	CLV	
	STY BITTARGET
WAITIRQ
	BIT BITTARGET	
	BVC WAITIRQ	
	CLV	
	
	SEI
	JSR SETUPTRANSFER

	LDA #$06
	STA BORDER
	JSR INITTRANSVAR
	LDY #$00	
	CLV	
	STY BITTARGET
WAITNMI
	BIT BITTARGET	
	BVC WAITNMI	
	CLV
		
	LDA #$01 
	STA BORDER
	JSR ENDTRANSFER
	JSR ENABLEDISPLAY	
	JSR GETCURRENTROW	
	JSR CLEARARROW	
	JSR PRINTPAGE
	LDX #00
	JSR SETCURRENTROWHEAD 
	JSR SETARROW
	; Use IRQ as a covert channel to send selected file information
	; Arduino has attached an interrupt on it's end 
	; It will measure time between falling edges of IRQ
	CLI
	JMP INPUT_GET
  	
	RTS			


IRQHANDLER1
	SEI	
	INC $D020	
	ASL $D019	;Acknowledge interrupt
	LDA COMMANDBYTE
	LDY BITPOS					
	CPY #$08
	BEQ FINISHSENDING1
	INC BITPOS
	INY 
SHIFTBYTE1	
	LSR			;Move rightmost bit right moving it to carry
	DEY
	BNE SHIFTBYTE1
	BCC IRQHANDLE1CONT
	
	LDA #$7F
	AND $D011
	STA $D011 
			
	LDA #$A0
	STA $D012			
	LDA #<IRQHANDLER2
	STA IRQVECTOR
	LDA #>IRQHANDLER2
	STA IRQVECTOR+1

	DEC $D020	
	CLI
	;JMP $EA31 
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI
	
	
IRQHANDLE1CONT	
	LDA #$7F
	AND $D011
	STA $D011 
	LDA #$00
	STA $D012		

	DEC $D020
	CLI	
	;JMP $EA31 
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI	

FINISHSENDING1
	LDA #$64
	STA BITTARGET		; Break foreground wait
	
	;LDA #$00
	;STA $D01A
		
	CLI
	;JMP $EA31 
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI

IRQHANDLER2
	SEI
	INC $D020	
	ASL $D019	;Acknowledge interrupt
	LDA COMMANDBYTE
	LDY BITPOS					
	CPY #$08
	BEQ FINISHSENDING2
	INC BITPOS
	INY 
SHIFTBYTE2	
	LSR			;Move rightmost bit right moving it to carry
	DEY
	BNE SHIFTBYTE2
	BCC IRQHANDLE2CONT
	
	LDA #$7F
	AND $D011
	STA $D011 		
	LDA #$00
	STA $D012			
	LDA #<IRQHANDLER1
	STA IRQVECTOR
	LDA #>IRQHANDLER1
	STA IRQVECTOR+1
	
	DEC $D020
	
	CLI
	;JMP $EA31 
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI	
	
	
IRQHANDLE2CONT	
	LDA #$7F
	AND $D011
	STA $D011 
	LDA #$A0
	STA $D012		

	DEC $D020
		
	CLI	
	;JMP $EA31 
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI	

	
FINISHSENDING2
	
	LDA #$64
	STA BITTARGET		; Break foreground wait
	
	;LDA #$00
	;STA $D01A
	
	;JMP $EA31
	PLA
	TAY
	PLA
	TAX
	PLA 
	RTI	


SETARROW 	; Input : X (current row), Changed : A, Y 
	LDY #$00
	LDA #$3E	; > sign
	STA (COLLOW),Y
	RTS

CLEARARROW	; Input : X (current row), Changed : A, Y 
	LDY #$00
	LDA #$20	; Space
	STA (COLLOW),Y
	RTS
	
SETCURRENTROW	; Input : X (current row), Changed : None
	PHA
	STX CURRENTROW
	TXA
	PHA
	ASL
	TAX
	LDA COLS+2,X
	STA COLLOW
	INX
	LDA COLS+2,X
	STA COLHIGH	
	PLA
	TAX
	PLA
	RTS
	
SETCURRENTROWHEAD ; Input : X (current row), Changed : None
	PHA
	STX CURRENTROW
	TXA
	PHA
	ASL
	TAX
	LDA COLS+2,X
	CLC
	SBC #01
	STA COLLOW
	INX
	LDA COLS+2,X
	STA COLHIGH	
	PLA
	TAX
	PLA
	RTS
		
GETCURRENTROW	; Input : None, Output : X (current row)
	LDX CURRENTROW
	RTS	
	
PRINTFILENAME	; Input : None, Changed: Y, A
	LDY #$00
FILENAMEPRINT	
	LDA (NAMELOW), Y
	BNE NOTEND
	LDA #$20
NOTEND	
	CMP #$3F
	BMI SYMBOL
	CLC
	SBC #$3f
SYMBOL	
	STA (COLLOW), Y
	INY
	CPY #$20
	BNE FILENAMEPRINT
	RTS

CLEARLINE	; Input : None, Changed: Y, A
	LDY #$00
	LDA #$20	
ICLEARLINE		
	STA (COLLOW), Y
	INY
	CPY #$20
	BNE ICLEARLINE
	RTS
	
FREQ    = 19704

INIT		; Input : None, Changed : A
	CLD
	LDA #$93
	JSR CHROUT
	LDA #$00 
	STA $D020
	LDA #$0B
	STA $D021
	JSR INITPC
		
	JSR DISABLEINTERRUPTS	
	
	JSR KILLCIA
	;JSR STARTMUSIC
		
	RTS

INITPC
	LDX #$00
	LDA #$0F
CBL
	STA $D800,X
	STA $D900,X
	STA $DA00,X
	STA $DB00,X	
	INX
	BNE CBL
	RTS
	
STARTMUSIC
	JSR COPYMUSIC
	LDA #$00
	JSR $C003

        ;point to our player routine
        LDA #<NMIROUTINE
        STA SOFTNMIVECTOR
        LDA #>NMIROUTINE
        STA SOFTNMIVECTOR+1
        
        ;setup CIA #2
        LDA #<FREQ
        STA $DD04 
        LDA #>FREQ
        STA $DD05
        
        LDA #$81
        STA $DD0D
        LDA #$11
        STA $DD0E		
	RTS	

KILLCIA
	LDY #$7f    ; $7f = %01111111 
        STY $dc0d   ; Turn off CIAs Timer interrupts 
        STY $dd0d   ; Turn off CIAs Timer interrupts 
        LDA $dc0d   ; cancel all CIA-IRQs in queue/unprocessed 
        LDA $dd0d   ; cancel all CIA-IRQs in queue/unprocessed 
	RTS	

DISABLEINTERRUPTS
        LDY #$7f    				; $7f = %01111111 
        STY $dc0d   				; Turn off CIAs Timer interrupts 
        STY $dd0d  				; Turn off CIAs Timer interrupts 
        LDA $dc0d  				; cancel all CIA-IRQs in queue/unprocessed 
        LDA $dd0d   				; cancel all CIA-IRQs in queue/unprocessed 
	
					
; 	Change interrupt routines
	ASL $D019
	LDA #$00
	STA $D01A
	RTS

DISABLEDISPLAY
	LDA #$0B				;%00001011 ; Disable VIC display until the end of transfer
	STA $D011	
	RTS
ENABLEDISPLAY
	LDA #$1B				;%00001011 ; Disable VIC display until the end of transfer
	STA $D011	
	RTS	

SETUPTRANSFER	
	JSR DISABLEINTERRUPTS
	JSR DISABLEDISPLAY
	LDA #$37
	STA $01	
					; Do not Disable kernal & basic rom	
	
	LDA #<CARTRIDGENMIHANDLER
	STA SOFTNMIVECTOR
	LDA #>CARTRIDGENMIHANDLER
	STA SOFTNMIVECTOR+1
		
    	LDA #01					
   	STA BORDER
   	LDY #$00	;Setup for transfer routine   	   	
   	;JSR WAITLINE   	
	RTS
WAITLINE   	
   	LDA #$80
   	CMP $D012
   	BNE WAITLINE
   	JSR WASTELINES 
   	INY
   	BNE WAITLINE
   	RTS	
WASTELINES
	LDX #$00
CONSUME	
	NOP
	INX
	BNE CONSUME		
	RTS	
	
INITTRANSVAR
	LDA #$F0
	STA DATA_LOW
	STA ACTUAL_LOW
	LDA #$1C
	STA DATA_HIGH
	STA ACTUAL_HIGH	
	LDA #$03
	STA DATA_LENGTH
	TAX		
	LDY #$00
	RTS
	
ENDTRANSFER
	LDA #<ROMNMIHANDLER
	STA SOFTNMIVECTOR
	LDA #>ROMNMIHANDLER
	STA SOFTNMIVECTOR+1
	RTS
		
NMIROUTINE
	PHA
	TXA
	PHA
	TYA
	PHA
	
	JSR $C000	; Call play
	
	LDA $DD0D	; Acknowledge
	PLA
	TAY
	PLA 
	TAX
	PLA
	RTI	
	
COPYMUSIC
	LDA #$00
	STA $FB
	STA $FD
	LDA #>SID
	STA $FC
	LDA #$C0
	STA $FE
	LDY #$00
COPYBLOCK	
	LDA ($FB), Y
	STA ($FD), Y
	INY
	BNE COPYBLOCK
	INC $FC
	INC $FE
	LDA $FE
	CMP #$CC
	BNE COPYBLOCK	
	RTS
	

PRINTTITLE	; Input : None, Changed : A, X
	LDX #$00
NEXTCHAR	
	LDA TITLE, X
	BEQ OUTTITLEPRINT
	CMP #$3F
	BMI NOTSPACE
	CLC
	SBC #$3f
NOTSPACE	
	STA $0408, X
	INX
	BNE NEXTCHAR
OUTTITLEPRINT
	RTS
	
PRINTPAGE	; Input : None, Changed : A, X, Y
	LDA CURPAGENAMELOW
	STA NAMELOW
	LDA CURPAGENAMEHIGH
	STA NAMEHIGH

	LDX #$00
SETCOL	
	JSR SETCURRENTROW

	JSR PRINTFILENAME
	
	INX
	CPX CURPAGEITEMS
	BEQ FINISH	
	LDA NAMELOW
	CLC
	ADC #$20
	STA NAMELOW
	BCC NEXTFILE
	INC NAMEHIGH
NEXTFILE
	JMP SETCOL	
FINISH
	CPX #$14
	BEQ ACTUALFINISH
	JSR SETCURRENTROW
	JSR CLEARLINE
	INX 
	CLV
	BVC FINISH
	
ACTUALFINISH	
	LDX #COMMANDENTERMASK
	STX COMMANDBYTE	
	RTS

COMMANDBYTE	.BYTE 0
CURRENTROW	.BYTE 0
CURPAGENAMELOW	.BYTE <GAMELIST
CURPAGENAMEHIGH .BYTE >GAMELIST
BITPOS		.BYTE 0

COLS	
	.WORD $0404, $042C, $0454, $047C, $04A4, $04CC, $04F4, $051C, $0544, $056C 
	.WORD $0594, $05BC, $05E4, $060C, $0634, $065C, $0684, $06AC, $06D4, $06FC
	.WORD $0724, $074C, $0774, $079C, $07C4
	
	
TITLE	
	.TEXT "IRQHACK64 FILE LIST"
	.BYTE 0
	
	*=$0D00
SID	
;	.binary "SidFile.bin"

; File name storage area
	*=$1CEF
	.BYTE 0


CURPAGEITEMS	= $1CF0
PAGECOUNT	= $1CF1
CURPAGEINDEX	= $1CF2
;LASTSELECTED	= $1CF2
;LASTSELECTEDPAGE= $1CF3
GAMELIST	 = $1D00



	